#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20.04 && immutable' }
  environment {
    REPO = "k8s-integration-infra"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  parameters {
    // disabled by default, but required to start Rally tests:
    booleanParam(name: 'rally_tests_ci', defaultValue: false, description: 'Enable Rally tests')
  }
  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Lint'){
      steps {
        withGithubNotify(context: "Lint") {
          dir("${BASE_DIR}"){
            echo 'command for linting'
          }
        }
      }
    }
    stage('Build'){
      steps {
        withGithubNotify(context: "Build") {
          dir("${BASE_DIR}"){
            echo 'command for building'
          }
        }
      }
    }
    stage('Test'){
      when {
              beforeAgent true
              // Always when running builds on branches/tags
              allOf {
                branch 'main'         // Only runs for branch main
                expression { return rally_tests_ci }
              }
      }
      steps {
        withGithubNotify(context: "Test") {
          dir("${BASE_DIR}"){
            echo 'command for testing'
          }
        }
      }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}
